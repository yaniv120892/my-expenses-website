import React from "react";
import { Box, MenuItem, TextField } from "@mui/material";
import CategorySelect from "../CategorySelect";

export interface TransactionFormFieldsProps {
  form: {
    description: string;
    value: number | string;
    categoryId: string;
    type: "EXPENSE" | "INCOME";
    date: string;
  };
  errors: { [k: string]: string };
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
}

const TransactionFormFields: React.FC<TransactionFormFieldsProps> = ({
  form,
  errors,
  onChange,
}) => (
  <>
    <TextField
      label="Description"
      name="description"
      value={form.description}
      onChange={onChange}
      error={!!errors.description}
      helperText={errors.description}
      fullWidth
    />
    <TextField
      label="Value"
      name="value"
      type="number"
      value={form.value}
      onChange={onChange}
      error={!!errors.value}
      helperText={errors.value}
      fullWidth
    />
    <CategorySelect
      value={form.categoryId}
      onChange={onChange}
      error={!!errors.categoryId}
      helperText={errors.categoryId}
      label="Category"
      fullWidth
    />
    {form.categoryId === "" && (
      <Box sx={{ color: "orange", fontSize: 13, mt: -1, mb: 1 }}>
        If category is not filled, it will be generated by AI.
      </Box>
    )}
    <TextField
      select
      label="Type"
      name="type"
      value={form.type}
      onChange={onChange}
      error={!!errors.type}
      helperText={errors.type}
      fullWidth
    >
      <MenuItem value="EXPENSE">Expense</MenuItem>
      <MenuItem value="INCOME">Income</MenuItem>
    </TextField>
    <TextField
      label="Date"
      name="date"
      type="date"
      value={form.date}
      onChange={onChange}
      error={!!errors.date}
      helperText={errors.date}
      fullWidth
    />
  </>
);

export default TransactionFormFields;
